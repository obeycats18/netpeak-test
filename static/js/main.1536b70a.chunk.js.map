{"version":3,"sources":["assets/icons/weather/hurricane.svg","pages/NotFound/NotFound.tsx","utils/date.ts","API/axios.client.ts","components/Weather/weather.actions.ts","components/Weather/weather.thunks.ts","API/open-weather.api.ts","config/api.config.ts","components/Weather/WeatherProvider.tsx","types/open-weather.types.ts","assets/icons/weather/01d.svg","assets/icons/weather/01n.svg","assets/icons/weather/02d.svg","assets/icons/weather/02n.svg","assets/icons/weather/03d.svg","assets/icons/weather/03n.svg","assets/icons/weather/04d.svg","assets/icons/weather/04n.svg","assets/icons/weather/09d.svg","assets/icons/weather/09n.svg","assets/icons/weather/10d.svg","assets/icons/weather/10n.svg","assets/icons/weather/11d.svg","assets/icons/weather/11n.svg","assets/icons/weather/13d.svg","assets/icons/weather/13n.svg","assets/icons/weather/50d.svg","assets/icons/weather/50n.svg","utils/getIconByCode.ts","components/Weather/Icon/WeatherIcon.tsx","components/Weather/Temp/Temp.tsx","components/Weather/Temp/FeelsLike.tsx","components/Weather/General/General.tsx","components/Weather/Details/Statistic.tsx","assets/icons/weather/humidity.svg","assets/icons/weather/pressure.svg","assets/icons/weather/sunrise.svg","assets/icons/weather/sunset.svg","assets/icons/weather/wind.svg","utils/weather.ts","components/Weather/Details/StatisticGrid.tsx","components/Back/Back.tsx","components/Weather/Details/Detailes.tsx","pages/Weather/Weather.tsx","components/City/City.tsx","components/Geolocation/geolocation.action.ts","components/Geolocation/Geolocation.tsx","components/Geolocation/geolocation.thunk.ts","components/Weather/Current/WeatherCurrent.tsx","pages/Main/Main.tsx","App.tsx","components/Geolocation/geolocation.reduser.ts","components/Weather/weather.reducer.ts","store/store.ts","index.tsx"],"names":["WeatherNotFound","className","src","Hurricane","alt","daysOfWeek","toDate","dt","Date","getDayOfWeek","day","getDay","getTime","toLocaleTimeString","hour","minute","AxiosClient","options","client","this","axios","create","url","a","get","data","payload","post","put","delete","actions","weather","type","loading","openWeatherAPI","APP_KEY","process","console","error","coords","latitude","longitude","response","status","message","city","baseURL","getWeatherByCoords","dispatch","getWeatherByCity","WeatherProvider","Child","by","connect","geolocation","currentWeather","position","history","useHistory","useLocation","state","useEffect","isWeatherNotFound","push","iconsForCode","code","icon","Icon01d","Icon01n","Icon02d","Icon02n","Icon03d","Icon03n","Icon04d","Icon04n","Icon09d","Icon09n","Icon10d","Icon10n","Icon11d","Icon11n","Icon13d","Icon13n","Icon50d","Icon50n","getIconByCode","find","el","WeatherIcon","WeatherTemp","temp","classNames","Math","ceil","WeatherFeelsLike","feelsLike","main","feels_like","Statistic","name","value","content","toHumidityStr","humidity","toPressureStr","pressure","toWindStr","wind","toSunStr","metrics","visibility","toFixed","Visibility","Huminidy","Pressure","sunrise","sys","Sunrise","sunset","Sunset","speed","Wind","toMertics","Object","values","map","metric","Back","to","Icon","Details","Weather","City","useState","setName","Input","onChange","_","handleChange","placeholder","Button","onClick","length","getGeolocation","navigator","getCurrentPosition","Main","App","exact","path","component","INITIAL_STATE","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","action","applyMiddleware","Thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1536b70a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/hurricane.b719fdbb.svg\";","import React from \"react\";\n\nimport Hurricane from \"@icons/weather/hurricane.svg\";\n\nimport \"./style/not-found.scss\";\n\nexport const WeatherNotFound: React.FC = () => {\n  return (\n    <div className='weather-not-found'>\n      <div className='weather-not-found__icon'>\n        <img src={Hurricane} alt='' />\n      </div>\n      <h2 className='weather-not-found__headline'>\n        К сожалению, по данному городу прогноза не найдено :( <br /> Проверте\n        правильно ли вы ввели название\n      </h2>\n    </div>\n  );\n};\n","const daysOfWeek = [\n  \"Воскресенье\",\n  \"Понедельник\",\n  \"Вторник\",\n  \"Среда\",\n  \"Четверг\",\n  \"Пятница\",\n  \"Суббота\",\n];\n\nconst toDate = (dt: number) => new Date(dt * 1000);\n\nexport const getDayOfWeek = (dt: number): string => {\n  const date = toDate(dt);\n  const day = date.getDay();\n  return daysOfWeek[day];\n};\n\nexport const getTime = (dt: number): string => {\n  const date = toDate(dt);\n  return date.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" });\n};\n","import { IClient } from \"./base.client\";\nimport axios, { AxiosInstance, AxiosRequestConfig } from \"axios\";\n\nexport class AxiosClient implements IClient {\n  private client: AxiosInstance;\n\n  constructor(options: AxiosRequestConfig) {\n    this.client = axios.create(options);\n  }\n\n  async get<D>(url: string): Promise<D> {\n    const { data } = await this.client.get<D>(url);\n\n    return data;\n  }\n\n  async post<D, P>(url: string, payload: P) {\n    const { data } = await this.client.post<D>(url, payload);\n    return data;\n  }\n\n  async put<D, P>(url: string, payload: P) {\n    const { data } = await this.client.put<D>(url, payload);\n    return data;\n  }\n\n  async delete<D>(url: string) {\n    const { data } = await this.client.delete<D>(url);\n    return data;\n  }\n}\n","import type { Weather, WeatherNotFound } from \"types/open-weather.types\";\nimport { ActionsType } from \"types/redux.types\";\n\nconst SET_WEATHER = \"weather/SET_WEATHER\";\nconst SET_CURRENT_WEATHER = \"weather/SET_CURRENT_WEATHER\";\nconst SET_LOADING = \"weather/SET_LOADING\";\n\nexport const actions = {\n  setWeather: (weather: Weather | WeatherNotFound | null) =>\n    ({ type: SET_WEATHER, weather } as const),\n  setCurrentWeather: (weather: Weather | WeatherNotFound | null) =>\n    ({ type: SET_CURRENT_WEATHER, weather } as const),\n  setLoading: (loading: boolean) => ({ type: SET_LOADING, loading } as const),\n};\n\nexport type WeatherActions = ActionsType<typeof actions>;\n","import { Dispatch } from \"redux\";\n\nimport { ConfigAPI } from \"./../../config/api.config\";\n\nimport { AxiosClient } from \"@api/axios.client\";\nimport { OpenWeatherAPI } from \"@api/open-weather.api\";\n\nimport { actions } from \"./weather.actions\";\n\nconst client = new AxiosClient({ baseURL: ConfigAPI.baseURL });\nconst openWeatherAPI = new OpenWeatherAPI(client);\n\nexport const getWeatherByCoords =\n  (coords: GeolocationCoordinates) => async (dispatch: Dispatch) => {\n    const weather = await openWeatherAPI.getWeatherByCoords(coords);\n    dispatch(actions.setCurrentWeather(weather));\n  };\n\nexport const getWeatherByCity =\n  (city: string) => async (dispatch: Dispatch) => {\n    dispatch(actions.setLoading(true));\n    const weather = await openWeatherAPI.getWeatherByCity(city);\n    dispatch(actions.setWeather(weather));\n    dispatch(actions.setLoading(false));\n  };\n","import { Weather } from \"types/open-weather.types\";\nimport { IClient } from \"./base.client\";\n\nexport class OpenWeatherAPI {\n  private client: IClient;\n  private APP_KEY: string | undefined = process.env.REACT_APP_API_KEY;\n  constructor(client: IClient) {\n    this.client = client;\n\n    if (!this.APP_KEY) {\n      console.error(\"OpenWeather App ID not found!\");\n    }\n  }\n\n  public async getWeatherByCoords(coords: GeolocationCoordinates) {\n    try {\n      const weather = await this.client.get<Weather>(\n        `weather?lat=${coords.latitude}&lon=${coords.longitude}&units=metric&appid=${this.APP_KEY}`\n      );\n\n      return weather;\n    } catch (error) {\n      if (error.response.status === 404) {\n        console.error(\"Weather not found\");\n      }\n      return {\n        status: 404,\n        message: \"Weather not found\",\n      };\n    }\n  }\n\n  public async getWeatherByCity(city: string) {\n    try {\n      const weather = await this.client.get<Weather>(\n        `weather?q=${city}&units=metric&appid=${this.APP_KEY}`\n      );\n\n      return weather;\n    } catch (error) {\n      if (error.response.status === 404) {\n        console.error(\"Weather not found\");\n      }\n      return {\n        status: 404,\n        message: \"Weather not found\",\n      };\n    }\n  }\n}\n","export const ConfigAPI = {\n  baseURL: \"http://api.openweathermap.org/data/2.5\",\n};\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory, useLocation } from \"react-router\";\n\nimport { RootStore } from \"store/store\";\n\nimport { State } from \"types/location\";\nimport {\n  isWeatherNotFound,\n  Weather,\n  WeatherNotFound,\n} from \"../../types/open-weather.types\";\n\nimport { getWeatherByCity, getWeatherByCoords } from \"./weather.thunks\";\n\ntype By = \"city\" | \"coords\";\n\ntype WeatherChildComponentProps = {\n  weather: Weather | null;\n};\n\ntype WeatherStateToProps = {\n  weather: Weather | WeatherNotFound | null;\n  currentWeather: Weather | WeatherNotFound | null;\n  coords?: GeolocationCoordinates | null;\n  loading: boolean;\n};\n\ntype WeatherDispatchToProps = {\n  getWeatherByCity: (city: string) => void;\n  getWeatherByCoords: (coords: GeolocationCoordinates) => void;\n};\n\nexport type WeatherConsumerProps = WeatherStateToProps & WeatherDispatchToProps;\n\nexport const WeatherProvider = (\n  Child: React.ComponentType<WeatherChildComponentProps>,\n  by: By\n) => {\n  const WeatherConsumer: React.FC<WeatherConsumerProps> = ({\n    weather,\n    currentWeather,\n    coords,\n    loading,\n    getWeatherByCity,\n    getWeatherByCoords,\n  }) => {\n    const history = useHistory();\n    const location = useLocation<State>();\n    const city = location.state?.city;\n\n    useEffect(() => {\n      if (by === \"city\") {\n        city && getWeatherByCity(city);\n      } else if (by === \"coords\") {\n        coords && getWeatherByCoords(coords);\n      }\n    }, [coords, city]);\n\n    if (!weather && !currentWeather) {\n      return null;\n    }\n\n    if (isWeatherNotFound(weather)) {\n      history.push(\"/not-found\", {});\n      return null;\n    }\n\n    return (\n      <Child weather={(by === \"city\" ? weather : currentWeather) as Weather} />\n    );\n  };\n\n  const mapStateToProps = ({\n    weather,\n    geolocation,\n  }: RootStore): WeatherStateToProps => ({\n    weather: weather.weather,\n    currentWeather: weather.currentWeather,\n    coords: geolocation.position?.coords,\n    loading: weather.loading,\n  });\n\n  return connect(mapStateToProps, { getWeatherByCity, getWeatherByCoords })(\n    WeatherConsumer\n  );\n};\n","export type WeatherItem = {\n  id: number;\n  main: string;\n  description: string;\n  icon: string;\n};\n\nexport type Weather = {\n  coord: {\n    lon: number;\n    lat: number;\n  };\n  weather: Array<WeatherItem>;\n  base: string;\n  main: {\n    temp: number;\n    feels_like: number;\n    pressure: number;\n    humidity: number;\n    temp_min: number;\n    temp_max: number;\n  };\n  visibility: number;\n  wind: {\n    speed: number;\n    deg: number;\n  };\n  clouds: {\n    all: number;\n  };\n  dt: number;\n  sys: {\n    type: number;\n    id: number;\n    message: number;\n    country: string;\n    sunrise: number;\n    sunset: number;\n  };\n  id: number;\n  name: string;\n  cod: number;\n};\n\nexport type WeatherNotFound = {\n  status: number;\n  message: string;\n};\n\nexport const isWeatherNotFound = (\n  weather: Weather | WeatherNotFound | null\n) => {\n  if (!weather) return false;\n\n  return (weather as WeatherNotFound).status;\n};\n","export default __webpack_public_path__ + \"static/media/01d.bb121109.svg\";","export default __webpack_public_path__ + \"static/media/01n.fd0f7a73.svg\";","export default __webpack_public_path__ + \"static/media/02d.b99b6d2c.svg\";","export default __webpack_public_path__ + \"static/media/02n.65e9d884.svg\";","export default __webpack_public_path__ + \"static/media/03d.7f28cf13.svg\";","export default __webpack_public_path__ + \"static/media/03n.7f28cf13.svg\";","export default __webpack_public_path__ + \"static/media/04d.3c1cca23.svg\";","export default __webpack_public_path__ + \"static/media/04n.3c1cca23.svg\";","export default __webpack_public_path__ + \"static/media/09d.849418b4.svg\";","export default __webpack_public_path__ + \"static/media/09n.849418b4.svg\";","export default __webpack_public_path__ + \"static/media/10d.cc911786.svg\";","export default __webpack_public_path__ + \"static/media/10n.c6aeb9ad.svg\";","export default __webpack_public_path__ + \"static/media/11d.f0b50aee.svg\";","export default __webpack_public_path__ + \"static/media/11n.f0b50aee.svg\";","export default __webpack_public_path__ + \"static/media/13d.c8539ed4.svg\";","export default __webpack_public_path__ + \"static/media/13n.c8539ed4.svg\";","export default __webpack_public_path__ + \"static/media/50d.42cc5d57.svg\";","export default __webpack_public_path__ + \"static/media/50n.42cc5d57.svg\";","import Icon01d from \"@icons/weather/01d.svg\";\nimport Icon01n from \"@icons/weather/01n.svg\";\nimport Icon02d from \"@icons/weather/02d.svg\";\nimport Icon02n from \"@icons/weather/02n.svg\";\nimport Icon03d from \"@icons/weather/03d.svg\";\nimport Icon03n from \"@icons/weather/03n.svg\";\nimport Icon04d from \"@icons/weather/04d.svg\";\nimport Icon04n from \"@icons/weather/04n.svg\";\nimport Icon09d from \"@icons/weather/09d.svg\";\nimport Icon09n from \"@icons/weather/09n.svg\";\nimport Icon10d from \"@icons/weather/10d.svg\";\nimport Icon10n from \"@icons/weather/10n.svg\";\nimport Icon11d from \"@icons/weather/11d.svg\";\nimport Icon11n from \"@icons/weather/11n.svg\";\nimport Icon13d from \"@icons/weather/13d.svg\";\nimport Icon13n from \"@icons/weather/13n.svg\";\nimport Icon50d from \"@icons/weather/50d.svg\";\nimport Icon50n from \"@icons/weather/50n.svg\";\n\nconst iconsForCode = [\n  { code: \"01d\", icon: Icon01d },\n  { code: \"01n\", icon: Icon01n },\n  { code: \"02d\", icon: Icon02d },\n  { code: \"02n\", icon: Icon02n },\n  { code: \"03d\", icon: Icon03d },\n  { code: \"03n\", icon: Icon03n },\n  { code: \"04d\", icon: Icon04d },\n  { code: \"04n\", icon: Icon04n },\n  { code: \"09d\", icon: Icon09d },\n  { code: \"09n\", icon: Icon09n },\n  { code: \"10d\", icon: Icon10d },\n  { code: \"10n\", icon: Icon10n },\n  { code: \"11d\", icon: Icon11d },\n  { code: \"11n\", icon: Icon11n },\n  { code: \"13d\", icon: Icon13d },\n  { code: \"13n\", icon: Icon13n },\n  { code: \"50d\", icon: Icon50d },\n  { code: \"50n\", icon: Icon50n },\n];\n\nexport const getIconByCode = (code: string) => {\n  return iconsForCode.find((el) => el.code === code)?.icon;\n};\n","import React from \"react\";\nimport { getIconByCode } from \"@utils/getIconByCode\";\n\ntype WeatherIconProps = {\n  code: string;\n};\n\nexport const WeatherIcon: React.FC<WeatherIconProps> = ({ code }) => {\n  return (\n    <img\n      src={getIconByCode(code)}\n      className='weather__general-state__image'\n      alt='Cloudy'\n    />\n  );\n};\n","import React from \"react\";\n\nimport classNames from \"classnames\";\n\ntype WeatherTempProps = {\n  temp: number;\n  className?: string;\n};\n\nexport const WeatherTemp: React.FC<WeatherTempProps> = ({\n  temp,\n  className,\n}) => {\n  return (\n    <h1 className={classNames(\"weather__general-temp\", className)}>\n      {Math.ceil(temp)} &#8451;\n    </h1>\n  );\n};\n","import React from \"react\";\n\nimport classNames from \"classnames\";\n\ntype FeelsLikeProps = {\n  feelsLike: number;\n  className?: string;\n};\n\nexport const WeatherFeelsLike: React.FC<FeelsLikeProps> = ({\n  feelsLike,\n  className,\n}) => {\n  return (\n    <h3 className={classNames(\"weather__general-temp-feels\", className)}>\n      Ощущается как {Math.ceil(feelsLike)} &#8451;\n    </h3>\n  );\n};\n","import React from \"react\";\nimport { useHistory, useLocation } from \"react-router\";\n\nimport { getDayOfWeek, getTime } from \"@utils/date\";\nimport { WeatherProvider } from \"../WeatherProvider\";\nimport { WeatherIcon } from \"../Icon/WeatherIcon\";\nimport { WeatherTemp } from \"../Temp/Temp\";\nimport { WeatherFeelsLike } from \"../Temp/FeelsLike\";\n\nimport { State } from \"types/location\";\nimport { Weather } from \"types/open-weather.types\";\n\nimport \"../styles/general.scss\";\n\ntype GeneralProps = {\n  weather: Weather | null;\n};\n\nconst General: React.FC<GeneralProps> = ({ weather }) => {\n  const { state } = useLocation<State>();\n\n  if (!weather) {\n    return null;\n  }\n\n  return (\n    <aside className='weather__general'>\n      <div className='weather__general-state'>\n        <WeatherIcon code={weather.weather[0].icon} />\n      </div>\n      <WeatherTemp temp={weather.main.temp} />\n      <WeatherFeelsLike feelsLike={weather.main.feels_like} />\n      <p className='weather__general-date'>\n        {getDayOfWeek(weather.dt)},{\" \"}\n        <span className='time'>{getTime(weather.dt)}</span>\n      </p>\n      <div className='weather__general-city'>{state?.city}</div>\n    </aside>\n  );\n};\n\nexport default WeatherProvider(General, \"city\");\n","import React from \"react\";\n\nimport \"../styles/statistic.scss\";\n\ntype StatisticProps = {\n  name: string;\n  value?: string;\n  content?: any;\n  icon?: any;\n};\n\nexport const Statistic: React.FC<StatisticProps> = ({\n  name,\n  value,\n  content,\n  icon,\n}) => {\n  return (\n    <div className='weather-statistic__item'>\n      <p className='weather-statistic__item-name'>{name}</p>\n      {icon && (\n        <img src={icon} className='weather-statistic__item-icon' alt='' />\n      )}\n      {value && <h1 className='weather-statistic__item-value'>{value}</h1>}\n\n      {content ? content : null}\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/humidity.2fa22ab4.svg\";","export default __webpack_public_path__ + \"static/media/pressure.c67bce14.svg\";","export default __webpack_public_path__ + \"static/media/sunrise.5db6d8fd.svg\";","export default __webpack_public_path__ + \"static/media/sunset.ce1cc744.svg\";","export default __webpack_public_path__ + \"static/media/wind.32eca7ef.svg\";","import { Weather } from \"types/open-weather.types\";\nimport { getTime } from \"./date\";\n\nimport Huminidy from \"@icons/weather/humidity.svg\";\nimport Pressure from \"@icons/weather/pressure.svg\";\nimport Sunrise from \"@icons/weather/sunrise.svg\";\nimport Sunset from \"@icons/weather/sunset.svg\";\nimport Wind from \"@icons/weather/wind.svg\";\nimport Visibility from \"@icons/weather/50d.svg\";\n\ntype MetricValue<V> = {\n  name: string;\n  value: V;\n  icon: any;\n};\n\nexport type Metrics = {\n  visibility: MetricValue<string>;\n  humidity: MetricValue<string>;\n  pressure: MetricValue<string>;\n  sunrise: MetricValue<string>;\n  sunset: MetricValue<string>;\n  wind: MetricValue<string>;\n};\n\nconst toVisibilityStr = (visibility: number) =>\n  `${(visibility / 1000).toFixed(1)} км`;\n\nconst toHumidityStr = (humidity: number) => `${humidity} %`;\nconst toPressureStr = (pressure: number) => `${pressure} мм`;\nconst toWindStr = (wind: number) => `${wind} м/с`;\nconst toSunStr = (dt: number) => getTime(dt);\n\nexport const toMertics = (weather: Weather): Metrics | null => {\n  if (!weather) return null;\n\n  return {\n    visibility: {\n      name: \"Видимость\",\n      value: toVisibilityStr(weather.visibility),\n      icon: Visibility,\n    },\n    humidity: {\n      name: \"Влажность\",\n      value: toHumidityStr(weather.main.humidity),\n      icon: Huminidy,\n    },\n    pressure: {\n      name: \"Давление\",\n      value: toPressureStr(weather.main.pressure),\n      icon: Pressure,\n    },\n    sunrise: {\n      name: \"Рассвет\",\n      value: toSunStr(weather.sys.sunrise),\n      icon: Sunrise,\n    },\n    sunset: {\n      name: \"Закат\",\n      value: toSunStr(weather.sys.sunset),\n      icon: Sunset,\n    },\n    wind: {\n      name: \"Скорость ветра\",\n      value: toWindStr(weather.wind.speed),\n      icon: Wind,\n    },\n  };\n};\n","import React from \"react\";\n\nimport { Statistic } from \"./Statistic\";\n\nimport { WeatherProvider } from \"../WeatherProvider\";\nimport { toMertics } from \"@utils/weather\";\nimport { Weather } from \"types/open-weather.types\";\n\nimport \"../styles/statistic.scss\";\n\ntype StatisticGridProps = {\n  weather: Weather | null;\n};\n\nconst StatisticGrid: React.FC<StatisticGridProps> = ({ weather }) => {\n  if (!weather) {\n    return null;\n  }\n\n  const metrics = toMertics(weather);\n\n  if (!metrics) {\n    return null;\n  }\n\n  return (\n    <div className='weather-statistic'>\n      <div className='weather-statistic__grid'>\n        {Object.values(metrics).map((metric) => (\n          <Statistic\n            icon={metric.icon}\n            name={metric.name}\n            value={metric.value}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default WeatherProvider(StatisticGrid, \"city\");\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Icon } from \"semantic-ui-react\";\n\nimport \"./styles/back.scss\";\n\nexport const Back: React.FC = () => {\n  return (\n    <div className='back'>\n      <Link to='/'>\n        <Icon name='arrow left' />\n        Назад к выбору\n      </Link>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport StatisticGrid from \"./StatisticGrid\";\nimport { Back } from \"@components/Back/Back\";\n\nimport \"../styles/details.scss\";\n\nexport const Details: React.FC = () => {\n  return (\n    <main className='weather__details'>\n      <Back />\n      <StatisticGrid />\n    </main>\n  );\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport General from \"@components/Weather/General/General\";\nimport { Details } from \"@components/Weather/Details/Detailes\";\n\nimport \"./styles/weather.scss\";\n\nexport const Weather: React.FC = () => {\n  return (\n    <div className='weather'>\n      <General />\n      <Details />\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nimport { Input, Button } from \"semantic-ui-react\";\n\nimport \"./style/city.scss\";\n\nexport const City: React.FC = () => {\n  const [name, setName] = useState(\"\");\n\n  const history = useHistory();\n\n  const handleChange = (value: string) => {\n    setName(value);\n  };\n\n  const handleButtonClick = () => {\n    if (!name || !name.length) return;\n\n    history.push(\"/weather\", { city: name });\n  };\n\n  return (\n    <div className='weather-main__city'>\n      <h2 className='weather-main__city-headline'>\n        Узнайте погоду в любой точке мира\n      </h2>\n      <Input\n        value={name}\n        onChange={(_, { value }) => handleChange(value)}\n        className='weather-main__city-input'\n        placeholder='Введите название города'\n      />\n      <Button onClick={handleButtonClick}>Найти</Button>\n    </div>\n  );\n};\n","import { ActionsType } from \"../../types/redux.types\";\n\nconst SET_GEOLOCATION = \"geo/SET_GEOLOCATION\";\n\nexport const actions = {\n  setGeolocation: (position: GeolocationPosition) =>\n    ({ type: SET_GEOLOCATION, position } as const),\n};\n\nexport type GeolocationActions = ActionsType<typeof actions>;\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { getGeolocation } from \"./geolocation.thunk\";\n\ntype MapDispatchToProps = {\n  getGeolocation: () => void;\n};\n\nconst Geolocation: React.FC<MapDispatchToProps> = ({ getGeolocation }) => {\n  useEffect(() => {\n    getGeolocation();\n  }, []);\n\n  return null;\n};\n\nexport default connect(null, { getGeolocation })(Geolocation);\n","import { Dispatch } from \"redux\";\nimport { actions } from \"./geolocation.action\";\n\nexport const getGeolocation = () => (dispatch: Dispatch) => {\n  if (!navigator.geolocation) {\n    return console.error(\"Geolocation is not supported by this browser!\");\n  }\n\n  navigator.geolocation.getCurrentPosition((position: GeolocationPosition) => {\n    dispatch(actions.setGeolocation(position));\n  });\n};\n","import React from \"react\";\nimport { Weather } from \"types/open-weather.types\";\nimport { WeatherIcon } from \"../Icon/WeatherIcon\";\nimport { WeatherTemp } from \"../Temp/Temp\";\nimport { WeatherFeelsLike } from \"../Temp/FeelsLike\";\nimport { WeatherProvider } from \"../WeatherProvider\";\n\nimport \"../styles/current.scss\";\n\ntype WeatherCurrentProps = {\n  weather?: Weather | null;\n};\n\nconst WeatherCurrent: React.FC<WeatherCurrentProps> = ({ weather }) => {\n  return weather ? (\n    <div className='weather-current'>\n      <div className='weather-current__icon'>\n        <WeatherIcon code={weather.weather[0].icon} />\n      </div>\n      <div className='weather-current__temp'>\n        <WeatherTemp\n          temp={weather.main.temp}\n          className='weather-current__temp-value'\n        />\n        <WeatherFeelsLike\n          className='weather-current__temp-feels'\n          feelsLike={weather.main.feels_like}\n        />\n      </div>\n    </div>\n  ) : null;\n};\n\nexport default WeatherProvider(WeatherCurrent, \"coords\");\n","import React from \"react\";\n\nimport { City } from \"@components/City/City\";\nimport Geolocation from \"@components/Geolocation/Geolocation\";\nimport WeatherCurrent from \"@components/Weather/Current/WeatherCurrent\";\n\nimport \"./style/main.scss\";\n\nexport const Main: React.FC = () => {\n  return (\n    <div className='weather-main'>\n      <Geolocation />\n      <WeatherCurrent />\n      <City />\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { WeatherNotFound } from \"@pages/NotFound/NotFound\";\nimport { Weather } from \"@pages/Weather/Weather\";\nimport { Main } from \"@pages/Main/Main\";\nimport { Route, Switch } from \"react-router\";\n\nconst App: React.FC = () => {\n  return (\n    <Switch>\n      <Route exact path='/' component={Main} />\n      <Route exact path='/weather' component={Weather} />\n      <Route exact path='/not-found' component={WeatherNotFound} />\n    </Switch>\n  );\n};\n\nexport default App;\n","import { GeolocationActions } from \"./geolocation.action\";\n\ntype InitialState = {\n  position: GeolocationPosition | null;\n};\n\nconst INITIAL_STATE: InitialState = {\n  position: null,\n};\n\nexport const geolocation = (\n  state = INITIAL_STATE,\n  action: GeolocationActions\n) => {\n  switch (action.type) {\n    case \"geo/SET_GEOLOCATION\": {\n      return { ...state, position: action.position };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import { Weather, WeatherNotFound } from \"types/open-weather.types\";\nimport { WeatherActions } from \"./weather.actions\";\n\ntype InitialState = {\n  weather: Weather | WeatherNotFound | null;\n  currentWeather: Weather | WeatherNotFound | null;\n  loading: boolean;\n};\n\nconst INITIAL_STATE: InitialState = {\n  weather: null,\n  currentWeather: null,\n  loading: false,\n};\n\nexport const weather = (\n  state = INITIAL_STATE,\n  action: WeatherActions\n): InitialState => {\n  switch (action.type) {\n    case \"weather/SET_WEATHER\": {\n      return { ...state, weather: action.weather };\n    }\n\n    case \"weather/SET_CURRENT_WEATHER\": {\n      return { ...state, currentWeather: action.weather };\n    }\n\n    case \"weather/SET_LOADING\": {\n      return { ...state, loading: action.loading };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport Thunk from \"redux-thunk\";\n\nimport { geolocation } from \"@components/Geolocation/geolocation.reduser\";\nimport { weather } from \"@components/Weather/weather.reducer\";\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(\n  combineReducers({ geolocation, weather }),\n  composeEnhancers(applyMiddleware(Thunk))\n);\n\nexport type RootStore = ReturnType<typeof store.getState>;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport { Provider } from \"react-redux\";\nimport { HashRouter as Router } from \"react-router-dom\";\n\n// Semantic UI Styles\nimport \"semantic-ui-css/semantic.min.css\";\n\n// Redux Store\nimport { store } from \"./store/store\";\n\nimport \"./index.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}